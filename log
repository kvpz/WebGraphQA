2019 04 01

Init

<div class="body-part main-body"> contains all the page modules.  This is the element that is
most likely to change; plus it contains all the primary content so it is important to analysis this
element thoroughly.
Verify that the class value is the same for every page.  If there is a discrepency
in the class value, it should be logged.

Look for:
id="body-content" role="main"
in order to reach the main content.

XPATH to a YMABI module carousel element
//*[@id="cc54bc26f25f6d1d"]/div[2]/div[1]/div[2]/div/div/div/div/div/div[1]/div/div/a

Protocol
1. Visit store.google.com
2. Get all the links on the page
3. Create a UUID for each string
4. Store the links and their UUID together in a file
5. Store the html page with the UUID as the name

2019-4-2
Hey, a log! I'm adding this on 2019-4-3.
Ended the day by storing urls in a hashtable, by url. Things got ugly.

2019-4-3
Lots of developing very little logging, more ideas.
Hashtable keys are now of class UUID generated using a url string to avoid long file names and simplicity.
Page source is stored in a file named with only the UUID.

Create a key map file for combining UUID and HTML page details.


2019-4-4
Thinking about creating a graph data structure, but decided to postpone.
TODO: Data needs to be stored on disk to perform offline website analysis and to accelerate crawling, and diff/ version analysis (identify if page has been updated).
TODO: GUI
TODO: Ability to pause and continue web crawling.
TODO: Save crawling status to disk in order to continue during another session.
TODO: (project specific) identify module types (ex, is it a carousel, video, )
TODO: Build a TraversalFactory. This class would contain different types of traversals with embedded functionality in order to achieve a fruitful travel.
TODO: Collect the total amount of images and the size of each image for each page.
TEST: Verify the Buy buttons link to the correct config page (check if products match)
<h1 class="title-text header-text-3" itemprop="name">product_name</h1>
TODO: Create toggles: overwrite, overwrite if
TODO: Something that can run concurrent to the webdriver loading a page.


Directory Structure:
WebSiteGraph
    GraphDetails (a file)
    Pages
        Page (dir name uses UUID)
            Source (UUID.html)
            Details

Create a program that will tell a screen-recorder when to stop playing when a certain event thrown by the browser via Selenium arrives.

2019-4-6

Project is now built on JDK 8 instead of JDK 11 for portability reasons and JNI support.
https://www.chilkatsoft.com/java-loadLibrary-Linux.asp
https://www.ibm.com/developerworks/java/tutorials/j-jni/j-jni.html
https://docs.oracle.com/javase/10/docs/specs/jni/index.html



Web crawler feature
Create a function to capture the size of the DOM after scrolling through the page. This is for performance testing.


Detect console errors

Does https://store.google.com/collection/offers have a content element??


2019-4-16
Exception in thread "main" org.openqa.selenium.StaleElementReferenceException: The element reference of <a class="mqn2-abd" href="/product/smart_light_bundles"> is stale; either the element is no longer attached to the DOM, it is not in the current frame context, or the document has been refreshed
This exception says a lot about how inefficient the webdriver is at analyzing static html.  All I want to do is extract the value for the href attribute, which does not need javascript in order for it to appear in the viewport.
When there is time, the evaluation of static html files can be optimized by using a binding to the C library MyHTML (https://github.com/lexborisov/myhtml)

There are a total of 36 ids across the US only.  I hope that is the maximum amount across all regions.
The point of gathering the ids of the modules is that we can be able to assign automated user interactions based on the
id of the modules. Each module may have a set of "viewport actions." By that I mean that each viewport will respond to different actions.
Mostly the difference will be the action of swiping on mobile.... but you can swipe both on mobile and on desktop.


Be able to get an average of lighthouse metrics (even though running tests on simulated takes an average (but it's better to be safe than sorry)).
Basically just do a 1 to 1 matching (should be the same for the same page from run to run, but, to be safe, check that
the keys / key paths are the same and then get the values to find the average.


Webpages to download manually:
store.google.com/my/product/chromecast_2015
store.google.com/my/product/chromecast_2015_specs
store.google.com/my/product/chromecast_2015_apps
store.google.com/my/product/chromecast_2015_learn

Visiting the above webpages without the 2015 appended will still lead to these pages, but the URL changes to
https://store.google.com/my/product/chromecast_2015?srp=/my/product/chromecast for example.


URLs that are not hyperlinked contain, or are, the following URLs
g.co
goo.gl


data-configure-url in product page should match current except "config" in url path
data-back-url in config should be match the current except for "product" in url path

Good to know information:
https://developers.google.com/search/reference/robots_txt


2019-29-04

Create a bash script to execute tests using copies of the same executable.

Create a diff function with various "diffy levels"


https://store.google.com/hk/product/google_wifi
To get the chinese copy, the host language query string needs to be appended to the URL.

storegooglecomprproductpixel_3a_switch
storegooglecomgbproductgoogle_nest_hub_max
storegooglecomusproductpixel_3a_switch
storegooglecomusproductgoogle_nest_hub_max
storegooglecomusproductpixel_3a_how_to_buy
 needs to be re-downloaded because not all links were inserted by JS.

 There are many config pages that have a scrollview embeded within the main body element.  The reason why the config
 menu is in a scrollview is because the footer content is not within the same element as the config menu.  Actually, it's
 because there is no legal copy in the footer. Actually, it is because of neither of those last two statements.



Express vpn: EoiXcs72 password

Test that all help links on mobile link to the correct region.


A good test would be to search elements that contain no content within. Also checking for elements that are repeated.  This
happened recently on the Google Home Mini Tech Specs page where there was a hidden module which was the same as the current
module, except some minor differences like the values assigned to the data-type attribute.  One thing that can be compared
is the text/ copy of a module (but not all modules contain copy).  Another comparison to do is to compare the images downloaded.

GB, IT, nest learning thermostat is missing? Why?
https://store.google.com/it/product/pixel_3_switch redirected to http://www.no.com/

Look for attribute "mqn2-mobile-only" because if a page does not have it (idk if all would have it), then it is not
mobile friendly.